{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Scaxlibur 博客",
  "home_page_url": "https://scaxlibur.github.io/",
  "feed_url": "https://scaxlibur.github.io/feed.json",
  "description": "一些学习随笔，偶尔分享生活",
  "favicon": "https://scaxlibur.github.io/favicon.ico",
  "items": [
    {
      "title": "三极管和场效应管",
      "url": "https://scaxlibur.github.io/EmbeddedDevelopment/hardWareDesign/2024-11-21-%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E5%9C%BA%E6%95%88%E5%BA%94%E7%AE%A1.html",
      "id": "https://scaxlibur.github.io/EmbeddedDevelopment/hardWareDesign/2024-11-21-%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E5%9C%BA%E6%95%88%E5%BA%94%E7%AE%A1.html",
      "summary": "思维导图 不妨试试放大和拖动这张图 一、 三极管/场效应管的工作原理 三极管，又称晶体管（Transistor），是一种由半导体材料制成的三端器件。其主要由三个区域构成： 发射极（Emitter）、基极（Base）和集电极（Collector）。根据材料的掺杂方式，三极管可以分为NPN型和PNP型两种类型。 发射极：高掺杂区域，用于发射载流子。 基极：...",
      "content_html": "<h2>思维导图</h2>\n<p>不妨试试放大和拖动这张图</p>\n",
      "date_published": "2024-11-21T00:00:00.000Z",
      "date_modified": "2024-11-22T12:42:41.000Z",
      "authors": [],
      "tags": [
        "硬件设计"
      ]
    },
    {
      "title": "OpenWRT软件包推荐",
      "url": "https://scaxlibur.github.io/NASServerRouter/router/2024-11-10-OpenWRT%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%8E%A8%E8%8D%90.html",
      "id": "https://scaxlibur.github.io/NASServerRouter/router/2024-11-10-OpenWRT%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%8E%A8%E8%8D%90.html",
      "summary": "Lucky反向代理 luci-app-lucky nginx反向代理的配置对于我这种 菜狗 而言比较困难，幸而有一款简便易用的反向代理服务器。 这个软件包集成了DDNS、反向代理、防火墙管理等等一系列功能，而且是图形化页面，用起来相当方便😋。 SQM QoS luci-app-sqm 所谓QoS，就是Quality of Service的意思，也就是...",
      "content_html": "<h2>Lucky反向代理</h2>\n<p><code>luci-app-lucky</code></p>\n<p>nginx反向代理的配置对于我这种 <span class=\"spoiler\" tabindex=\"-1\">菜狗</span> 而言比较困难，幸而有一款简便易用的反向代理服务器。</p>\n<p>这个软件包集成了DDNS、反向代理、防火墙管理等等一系列功能，而且是图形化页面，用起来相当方便😋。</p>\n<h2>SQM QoS</h2>\n<p><code>luci-app-sqm</code></p>\n<p>所谓QoS，就是Quality of Service的意思，也就是网络的服务质量管理。</p>\n<p>简单来说，就是一个通过调节网络中数据包优先级，从而实现最佳网络服务质量的服务。试想一个场景：同一个局域网下，服务器正在马不停蹄地下载大量数据，你正在包点激情对枪，旁边还挂着电棍otto的直播，而你的女朋友正在和闺蜜煲微信电话粥。这时你家的上下行带宽均达到极限，这样的情况下，究竟谁的数据包应该优先通行才能带来最好的体验？这就需要使用QoS技术了。</p>\n<p>QoS本质上来说是一种算法，能按照给定的优先级分配带宽。一般而言，即时性较高且对时延敏感的应用，如即时网络电话、网络游戏这样的应用场景，其发送的数据包大都是比较短小的；而即时性不强且对时延不敏感的应用，如BT下载等，其发送到数据包往往较大。因此QoS往往遵循<strong>小包优先</strong>的策略，优先将带宽分配给小数据包，而将剩下的带宽再分配给大包。如果优先级较高的数据和优先级较低的数据包发生抢占，则大包会被丢弃。这就是QoS运行的简要原理。</p>\n<p>当然，QoS算法还有依据数据包的源地址、目标地址等作为分类的依据，但总的来说都是差不多的。</p>\n<h2>最后</h2>\n<p>以上就是笔者认为OpenWRT必装的软件包了。我一般还会根据个人需要装一些科学上网的软件包，在此就不赘述了。</p>\n",
      "date_published": "2024-11-10T00:00:00.000Z",
      "date_modified": "2024-11-11T02:30:22.000Z",
      "authors": [],
      "tags": [
        "软路由"
      ]
    },
    {
      "title": "软路由入门指南",
      "url": "https://scaxlibur.github.io/NASServerRouter/router/2024-11-09-%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.html",
      "id": "https://scaxlibur.github.io/NASServerRouter/router/2024-11-09-%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.html",
      "summary": "什么是软路由？ 软路由是指利用台式机或服务器的供应商配合一定软件而形成的路由解决方案，主要靠对软件的设置，实现路由器的功能，它的软件与硬件是独立分开的。软路由使用普通计算机，使用通用的操作系统，如Linux或windows，因此软路由的设置事实上是windows或linux的设置。根据使用的操作系统不同，可以分为基于windows平台和基于Linux/...",
      "content_html": "<h2>什么是软路由？</h2>\n<p>软路由是指利用台式机或服务器的供应商配合一定软件而形成的路由解决方案，主要靠对软件的设置，实现路由器的功能，它的软件与硬件是独立分开的。软路由使用普通计算机，使用通用的操作系统，如Linux或windows，因此软路由的设置事实上是windows或linux的设置。根据使用的操作系统不同，可以分为基于windows平台和基于Linux/bsd平台开发的软件路由器。</p>\n<p>软路由之所以叫软路由，就是为了和硬路由进行区分。硬路由有专用的包转发硬件设计，所以性能会优于软路由。虽然软路由使用软件实现包转发，但开放的生态和较强的硬件性能，或许可以实现“力大砖飞”的效果。</p>\n<h2>软路由能做什么？</h2>\n<p>除了最基本的路由功能以外，软路由还有其他极其丰富的功能，这些功能均由软路由所安装的软件包决定。如<code>home assistant 家庭物联网关</code>、<code>广告拦截</code>、<code>smartDNS</code>等功能。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>有些功能可能违反相关法律，使用时请注意。</p>\n</div>\n<h2>软路由的实现方式</h2>\n<p>|主路由：一般有2个或以上网口，一个设置成wan口一个设置为lan口。                                    |\n|</p>\n",
      "date_published": "2024-11-09T00:00:00.000Z",
      "date_modified": "2024-11-10T15:19:01.000Z",
      "authors": [],
      "tags": [
        "软路由"
      ]
    },
    {
      "title": "有用的Docker镜像",
      "url": "https://scaxlibur.github.io/NASServerRouter/NAS/2024-11-07-%E6%9C%89%E7%94%A8%E7%9A%84dockerIMG.html",
      "id": "https://scaxlibur.github.io/NASServerRouter/NAS/2024-11-07-%E6%9C%89%E7%94%A8%E7%9A%84dockerIMG.html",
      "summary": "为什么用Docker？ Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 轻量级、可移植的特性为家庭用户拓展NAS功能带来了极大的便利。如果没有Dock...",
      "content_html": "<h2>为什么用Docker？</h2>\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>\n<p>轻量级、可移植的特性为家庭用户拓展NAS功能带来了极大的便利。如果没有Docker，光是处理不同设备上的依赖项就是难以愉悦的鸿沟。</p>\n<p>笔者使用的是黑群晖S6400，所以接下来的介绍都是黑群晖平台上几乎开箱即用的DockerIMG。但是出于一些原因，有的DockersIMG我不能在此列出。</p>\n<h2>影视服务器-Jellyfin</h2>\n<p><strong>搞NAS不搞影音等于白搞，搞影音不搞Jellyfin也是白搞。</strong> 这句话是彻头彻尾的暴论，但我的的确确不喜欢闭源的影视服务器。</p>\n<p>这里我推荐<a href=\"https://registry.hub.docker.com/r/nyanmisaka/jellyfin/\" target=\"_blank\" rel=\"noopener noreferrer\">nyanmisaka/jellyfin</a>, 这个映像支持硬解码，配置方面和其他版本的似乎没什么区别。</p>\n<p>但是jellyfin似乎一直有个BUG，就是在使用SUB字幕的时候，时间轴偶尔会对不上，需要自己手动调节。不知道现在修复没有，但是确实有点麻烦，因为每次打开节目都要调一下字幕的偏移量。中文的字幕还好，英文字幕就有点考验听力了，日语字幕基本上只能猜。</p>\n<h2>个人导航-heimdall</h2>\n<p>以前，我时常为折腾而烦恼————也不是因为别的，而是折腾出来的东西太多，而且全是以网站的形式呈现的。这种情况下就不得不开一个收藏夹，把自己做的东西收藏起来。但收藏夹毕竟不太美观，所以才有了heimdall这样的个人导航服务。</p>\n<p><a href=\"https://registry.hub.docker.com/r/linuxserver/heimdall/\" target=\"_blank\" rel=\"noopener noreferrer\">linuxserver/heimdall</a></p>\n<p>所谓个人导航，就是个人搭建的一种网络导航，有点像2345导航之类的，但放的全是自己的网站（当然也可以放其他网站，只是笔者需要整理自己折腾出来的东西）。</p>\n<p>简而言之，就是一个自己可以定制的导航主页。</p>\n",
      "date_published": "2024-11-07T00:00:00.000Z",
      "date_modified": "2024-11-11T15:39:28.000Z",
      "authors": [],
      "tags": [
        "NAS"
      ]
    },
    {
      "title": "黑群晖NAS的硬件配置",
      "url": "https://scaxlibur.github.io/NASServerRouter/NAS/2024-11-12-%E9%BB%91%E7%BE%A4%E6%99%96NAS%E7%9A%84%E7%A1%AC%E4%BB%B6%E9%85%8D%E7%BD%AE.html",
      "id": "https://scaxlibur.github.io/NASServerRouter/NAS/2024-11-12-%E9%BB%91%E7%BE%A4%E6%99%96NAS%E7%9A%84%E7%A1%AC%E4%BB%B6%E9%85%8D%E7%BD%AE.html",
      "summary": "CPU和主板的选择 一般而言，笔者这种穷哥们上黑群晖都是为了便宜，所以这里就推荐性能普通的板U套装。这种板U套装和DIY装机所说的板U套装有所不同。NAS尤其是黑群晖常见的板U套装，CPU都是直接焊接在主板上的。这样一来，板U套装选择的局限性就比较大。 哥们你都玩黑群晖了还选啥？ 以下是笔者选择的板U配置： 核显 黑群晖中的核显，主要用于视频的硬解码。...",
      "content_html": "<h2>CPU和主板的选择</h2>\n<p>一般而言，笔者这种穷哥们上黑群晖都是为了便宜，所以这里就推荐性能普通的板U套装。这种板U套装和DIY装机所说的板U套装有所不同。NAS尤其是黑群晖常见的板U套装，CPU都是直接焊接在主板上的。这样一来，板U套装选择的局限性就比较大。 <span class=\"spoiler\" tabindex=\"-1\">哥们你都玩黑群晖了还选啥？</span></p>\n<p>以下是笔者选择的板U配置：</p>\n<p>|          |          型号         |\n|</p>\n",
      "date_published": "2024-11-07T00:00:00.000Z",
      "date_modified": "2024-11-12T12:33:51.000Z",
      "authors": [],
      "tags": [
        "NAS"
      ]
    },
    {
      "title": "FreeRTOS简介",
      "url": "https://scaxlibur.github.io/EmbeddedDevelopment/FreeRTOS/2024-11-06-FreeRTOS%E7%AE%80%E4%BB%8B.html",
      "id": "https://scaxlibur.github.io/EmbeddedDevelopment/FreeRTOS/2024-11-06-FreeRTOS%E7%AE%80%E4%BB%8B.html",
      "summary": "1.什么是FreeRTOS？ FreeRTOS是一个热门的嵌入式设备用即时操作系统核心，它于2003年由Richard Barry设计，并已被经成功移植到35种不同的微控制器上。 ESP32系列中的FreeRTOS和原始FreeRTOS有所不同。原始FreeRTOS是一款小巧高效的实时操作系统，适用于许多单核MCU和SoC。但为了支持双核ESP芯片，如...",
      "content_html": "<h2>1.什么是FreeRTOS？</h2>\n<p>FreeRTOS是一个热门的嵌入式设备用即时操作系统核心，它于2003年由Richard Barry设计，并已被经成功移植到35种不同的微控制器上。</p>\n<p>ESP32系列中的FreeRTOS和原始FreeRTOS有所不同。原始FreeRTOS是一款小巧高效的实时操作系统，适用于许多单核MCU和SoC。但为了支持双核ESP芯片，如ESP32、ESP32-S3、ESP32-P4，ESP-IDF特别提供了支持双核对称多处理 (SMP) 的 FreeRTOS 实现。</p>\n<h2>2.为什么学习FreeRTOS？</h2>\n<p>对于ESP32系列单片机而言，ESP-IDF在系统启动时会默认启动FreeRTOS。因此，如果我们想要高效地利用ESP32系列丰富的硬件资源，使用FreeRTOS几乎成为一种必然。此外，随着嵌入式硬件性能的不断发展，FreeRTOS所占用的系统资源比重越来越小，FreeRTOS已不再成为嵌入式硬件性能的负担。相反，RTOS提供的事件驱动型设计方式，使得RTOS只是在处理实际任务时才会运行，这能够更合理的利用CPU，也有利于实现日益发展的低功耗技术。在实际项目中，如果程序等待一个超时事件，传统的无RTOS情况下，要么在原地一直等待而不能执行其它任务，要么使用复杂（相对RTOS提供的任务机制而言）的状态机机制。如果使用RTOS，则可以很方便的将当前任务阻塞在该事件下，然后自动去执行别的任务，这显然更方便，并且可以高效的利用CPU。</p>\n<p>但与此同时，FreeRTOS也有一定弊端：</p>\n<ol>\n<li>大多数RTOS代码都具有一定规模，任何代码都可能带来BUG，何况是代码具有一定规模的RTOS，因此引入RTOS的同时也可能会引入该RTOS的BUG，这些RTOS本身的BUG一旦被触发，影响可能是是灾难性的。</li>\n<li>熟练的使用RTOS是一项技能，需要专业的知识储备和长期的经验积累。不将RTOS分析透彻，很容易为项目埋下错误。典型的，像中断优先级、任务堆栈分配、可重入等，都是更容易出错的地方。</li>\n<li>RTOS的优先级嵌套使得任务执行顺序、执行时序更难分析，甚至变成不可能。任务嵌套对所需的最大堆栈RAM大小估计也变得困难。这对于很多对安全有严格要求的场合是不可想象的。</li>\n<li>RTOS应该用于任务复杂的场合，以至于对任务调度的需求可以抵消RTOS所带来的稳定性影响，但大部分的应用并非复杂到需要RTOS。</li>\n</ol>\n<p>随着物联网的发展，未来的嵌入式产品必然更为复杂、连接性更强以及需要更丰富的用户界面。当处理这些任务时，一个好的RTOS就变得不可缺少了。</p>\n<p>书到用时方恨少，我希望自己永远不会有这种感觉。</p>\n<h2>参考</h2>\n<p>1.<a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/system/freertos.html\" target=\"_blank\" rel=\"noopener noreferrer\">ESP-IDF FreeRTOS概述</a></p>\n",
      "date_published": "2024-11-06T00:00:00.000Z",
      "date_modified": "2024-11-10T07:07:56.000Z",
      "authors": [],
      "tags": [
        "ESP32",
        "嵌入式开发"
      ]
    },
    {
      "title": "C++嵌入式开发入门",
      "url": "https://scaxlibur.github.io/EmbeddedDevelopment/2024-11-03-C__%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8.html",
      "id": "https://scaxlibur.github.io/EmbeddedDevelopment/2024-11-03-C__%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8.html",
      "summary": "前言 C++大体上与C类似，是一门广泛应用的嵌入式开发语言。但因其支持面向对象特性，在嵌入式开发的部分领域，尤其是复杂系统的构建中更具优势。本文将以ESP-IDF为例，简要介绍C++的封装与多态在嵌入式开发中的应用。 本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1 本文的例子来源于AS608指纹模块在ESP-IDF环境下的驱动 正文 ...",
      "content_html": "<h2>前言</h2>\n<p>C++大体上与C类似，是一门广泛应用的嵌入式开发语言。但因其支持面向对象特性，在嵌入式开发的部分领域，尤其是复杂系统的构建中更具优势。本文将以ESP-IDF为例，简要介绍C++的封装与多态在嵌入式开发中的应用。</p>\n<p>本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1</p>\n<p>本文的例子来源于<a href=\"https://github.com/Scaxlibur/AS608_ESP-IDF\" target=\"_blank\" rel=\"noopener noreferrer\">AS608指纹模块在ESP-IDF环境下的驱动</a></p>\n<h2>正文</h2>\n<h3>封装与抽象</h3>\n<h4>什么是封装？</h4>\n<p><strong>封装</strong>是面向对象编程中的把数据和操作数据的函数绑定在一起的一个概念，这样能避免受到外界的干扰和误用，从而确保了安全。</p>\n<p><strong>数据封装</strong>是一种把数据和操作数据的函数捆绑在一起的机制，<strong>数据抽象</strong>是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。</p>\n<p>C++ 通过创建<strong>类</strong>来支持封装。类用于指定对象的形式，是一种用户自定义的数据类型，它是一种封装了数据和函数的组合。类中的数据称为成员变量，函数称为成员函数。类可以被看作是一种模板，可以用来创建具有相同属性和行为的多个对象。</p>\n<p>举一个现实生活中的真实例子，比如一台电视机，可以打开和关闭、切换频道、调整音量、添加外部组件（如音响、录像机、DVD 播放器），但是我们不知道它的内部实现细节，也就是说，我们并不知道其如何通过缆线接收信号，如何转换信号，并最终显示在屏幕上。</p>\n<p>这样，我们就可以说电视分开了其内部实现和外部接口，我们无需知道其内部实现原理，直接通过外部接口（如遥控器）就可以操控电视。就C++而言，C++为数据抽象提供了可能。</p>\n<h4>为什么要封装？</h4>\n<p>数据抽象有两个重要的优势：</p>\n<ul>\n<li>类的内部受到保护，不会因无意的用户级错误导致对象状态受损。</li>\n<li>类实现可能随着时间的推移而发生变化，以便应对不断变化的需求，或者应对那些要求不改变用户级代码的错误。</li>\n</ul>\n<p>如果只在类的私有部分定义数据成员，编写该类的作者就可以随意更改数据。如果实现发生改变，则只需要检查类的代码，看看这个改变会导致哪些影响。</p>\n<h4>上述内容在C中都可以通过头文件实现，为什么还要C++？</h4>\n<p>在C语言中，可使用名称相同的.c和.h文件代表一个硬件部件、规则协议或者外设。</p>\n<p>C++使用访问标签管理权限，即把类的成员分为了两个部分：可被外部直接访问和不可被外部直接访问。访问标签使得抽象是强制的，如果在其他部分调用类中的私有成员，编译器会抛出错误。</p>\n<p>C的头文件中也可以通过程序编写规范等方式实现只调用特定的接口，但这毕竟是一种非强制性的举措，如果开发人员疏忽，可能就会误调用我们不希望其调用的接口，导致程序出现错误。</p>\n<h4>以笔者的项目为例</h4>\n<p>笔者需要在程序中调用一个使用串口通信的指纹模块，而指纹模块本身具有多种功能，如初始化、校验密钥、对比指纹库等。但笔者调用时并不关心其内部实现，而只需要让指纹模块完成其该完成的动作，如添加指纹、刷指纹、删除指纹等。这样一来，我们就能把注意力从底层逻辑的实现转向模块与模块之间的配合，节省了大量的精力，便于我们管理大型项目。</p>\n<p>上文提到，笔者使用类将指纹模块封装为一个对象，使用private权限封装内部变量和函数；使用public权限暴露指纹模块对外接口。这样一来，我们就只需要关心怎么”用“而非”怎么实现“。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> IDENTIFIER</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint32_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> IDaddr </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\"> 0X</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">FFFFFFFF</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint32_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> IDpwd </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\"> 0x</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">00000000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                        //口令验证</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    typedef</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> struct</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> pageID;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                                //指纹ID</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> mathscore;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                             //匹配得分</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }SearchResult;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    typedef</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> struct</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> PS_max;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                                //指纹最大容量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  PS_level;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                              //安全等级</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        uint32_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> PS_addr;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  PS_size;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                               //通讯数据包大小</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  PS_N;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                                  //波特率基数N</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }SysPara;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> SendHead</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> SendAddr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> SendFlag</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> flag</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> SendLength</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Sendcmd</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> cmd</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> SendCheck</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> check</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">JudgeStr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                                //判断中断接收的数组有没有应答包</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    bool</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> AS608_Check</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                             //连接检查</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_GetImage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                          //录入图像 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_GenChar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> BufferID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                               //生成特征 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_Match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                             //精确比对两枚指纹特征 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_Search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> BufferID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> StartPage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> PageNum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">SearchResult</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            //搜索指纹 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_RegModel</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                          //合并特征（生成模板） </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_StoreChar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> BufferID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> PageID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                             //储存模板 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_DeletChar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> PageID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> N</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                   //删除模板 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_Empty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                             //清空指纹库 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_WriteReg</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> RegNum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> DATA</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                   //写系统寄存器 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_ReadSysPara</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">SysPara</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                 //读系统基本参数 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_SetAddr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint32_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> addr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                  //设置模块地址 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_WriteNotepad</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> NotePageNum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">content</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                      //写记事本 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_ReadNotepad</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> NotePageNum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">note</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                          //读记事 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_HighSpeedSearch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> BufferID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> StartPage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> PageNum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">SearchResult</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">   //高速搜索 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_ValidTempleteNum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">ValidN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                      //读有效模板个数 </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_HandShake</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint32_t</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">PS_Addr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                            //与AS608模块握手</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint32_t</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> PS_GetRandomCode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                                        //让模块发送一个随机数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    const</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> char</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">EnsureMessage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> ensure</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                                          //确认码错误信息解析</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ShowErrMessage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> ensure</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    IDENTIFIER</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">           //构造函数，相当于对象初始化</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    ~IDENTIFIER</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">          //析构函数，对象销毁时用于回收资源</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Add_FR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      //添加指纹</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> press_FR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //刷指纹</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Del_FR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      //删除指纹</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Del_FR_Lib</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  //删除所有指纹</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可见，指纹模块对外暴露的接口只有四个函数，还有构造与析构函数。这样，调用时只需要在四个函数中选择，实现了程序的解耦合，让程序易读。</p>\n<p>此外，构造函数在初始化对象时自动被调用，可以用于一些初始值和初始配置的设置，如注册UART资源等。析构函数在对象被销毁时自动调用，用于回收相对应的系统资源。但由于嵌入式开发中，绝大多数对象一经调用就永不销毁，所以用到析构函数的情况很少。</p>\n<p>下面是这个类被实例化为对象的具体案例：</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IDtask</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">arg</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    IDENTIFIER identifier;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      //创建指纹识别器对象,也就是对象的实例化    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    identifier</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Add_FR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        identifier</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">press_FR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        #ifdef</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> TEST</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">             //测试用，如果宏定义了TEST，就会执行printf</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        printf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">IDtask任务调用</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        #endif</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        vTaskDelay</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5000</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">portTICK_PERIOD_MS);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对象一经实例化，我们就可以调用其对外暴露的接口了。如<code>identifier.Add_FR( )</code>。然而，如果我们尝试在这个函数中调用<code>identifier.IDaddr</code>，无论是读或写，都会导致编译器编译失败。</p>\n<h3>重载</h3>\n<p>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。</p>\n<p>当调用一个<strong>重载函数</strong>或<strong>重载运算符</strong>时，编译器通过比较所使用的参数类型与定义中的参数类型，决定选用最合适的定义。</p>\n<p>没看懂？举个例子吧。以下是笔者通过串口发送信息的三个函数，分别用于发送8位、16位和32位数据。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IDUARTwrite_Bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IDUARTwrite_Bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IDUARTwrite_Bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint32_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这三个函数的具体实现也不同：</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IDUARTwrite_Bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_ID, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">data, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IDUARTwrite_Bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint16_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> data1 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> data </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">&gt;&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_ID, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">data1, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_ID, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">data, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> IDUARTwrite_Bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">uint32_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> data1 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> data </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">&gt;&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 24</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> data2 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> data </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">&gt;&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 16</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    uint8_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> data3 </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> data </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">&gt;&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_ID, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">data1, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_ID, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">data2, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_ID, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">data3, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_ID, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">data, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>那么编译器在编译时如何区分名字相同的函数呢？答案就是函数传入参数的类型和顺序。这样，我们就可以让编译器通过函数的传入参数自动区分需要调用的函数，以此实现程序的简化，可读性更强。</p>\n<h2>写了这么多，应该怎么应用呢？</h2>\n<p>以下是笔者的项目结构，按从功能到实现的顺序画的思维导图：</p>\n<p>（可以拖动，不妨尝试一下）</p>\n",
      "date_published": "2024-11-03T00:00:00.000Z",
      "date_modified": "2024-11-12T12:59:36.000Z",
      "authors": [],
      "tags": [
        "嵌入式开发"
      ]
    },
    {
      "title": "总线舵机",
      "url": "https://scaxlibur.github.io/EmbeddedDevelopment/ESP32/2024-10-23-%E6%80%BB%E7%BA%BF%E8%88%B5%E6%9C%BA.html",
      "id": "https://scaxlibur.github.io/EmbeddedDevelopment/ESP32/2024-10-23-%E6%80%BB%E7%BA%BF%E8%88%B5%E6%9C%BA.html",
      "summary": "前言 总线舵机是一种利用UART总线进行控制的舵机。笔者购买的总线舵机使用单线UART总线，即TX与RX在同一条线上。有的文章指出这样的设计会产生冲突，但笔者猜测如果总线上只有总线舵机，干扰可以通过软件方法解决。 本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1 本文的例子来源于基于ESP32-S3的高安全性宿舍智能门锁设计 正文 UA...",
      "content_html": "<h2>前言</h2>\n<p>总线舵机是一种利用UART总线进行控制的舵机。笔者购买的总线舵机使用单线UART总线，即TX与RX在同一条线上。有的文章指出这样的设计会产生冲突，但笔者猜测如果总线上只有总线舵机，干扰可以通过软件方法解决。</p>\n<p>本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1</p>\n<p>本文的例子来源于<a href=\"https://github.com/Scaxlibur/smartLock\" target=\"_blank\" rel=\"noopener noreferrer\">基于ESP32-S3的高安全性宿舍智能门锁设计</a></p>\n<h2>正文</h2>\n<h3>UART配置</h3>\n<p>ESP-IDF配置UART的步骤分为以下几步：</p>\n<blockquote>\n<ol>\n<li><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-setting-communication-parameters\" target=\"_blank\" rel=\"noopener noreferrer\">设置通信参数</a> - 设置波特率、数据位、停止位等</li>\n<li><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-setting-communication-pins\" target=\"_blank\" rel=\"noopener noreferrer\">设置通信管脚</a> - 分配连接设备的管脚</li>\n<li><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-driver-installation\" target=\"_blank\" rel=\"noopener noreferrer\">安装驱动程序</a> - 为 UART 驱动程序分配资源</li>\n<li><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-running-uart-communication\" target=\"_blank\" rel=\"noopener noreferrer\">运行 UART 通信</a> - 发送/接收数据</li>\n<li><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-using-interrupts\" target=\"_blank\" rel=\"noopener noreferrer\">使用中断</a> - 触发特定通信事件的中断</li>\n<li><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-deleting-driver\" target=\"_blank\" rel=\"noopener noreferrer\">删除驱动程序</a> - 如无需 UART 通信，则释放已分配的资源</li>\n</ol>\n</blockquote>\n<p>步骤 1 到 3 为配置阶段，步骤 4 为 UART 运行阶段，步骤 5 和 6 为可选步骤。</p>\n<h4>设置通信参数</h4>\n<p>ESP-IDF的配置风格是使用结构体进行配置，UART配置也不例外。完整的配置结构体如下图：</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> uart_config_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> uart2servo_config </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .baud_rate </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 115200</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                    //比特率</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .data_bits </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> UART_DATA_8_BITS,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">          //传输位</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .parity </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> UART_PARITY_DISABLE,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">          //奇偶控制</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .stop_bits </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> UART_STOP_BITS_1,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">          //停止位</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .flow_ctrl </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> UART_HW_FLOWCTRL_DISABLE,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  //硬件流控模式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .source_clk </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> UART_SCLK_DEFAUL</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">          //通信模式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>随后，使用<code>uart_param_config(uart_port_t uart_num, const uart_config_t *uart_config)</code>注册该配置，使系统为该UART通信分配相应资源。</p>\n<p>该函数第一个传入参数为UART控制器编号，ESP32-S3有3个UART控制器，由于ESP32使用UART_NUM_0向上位机发送日志，故本例使用UART_NUM_2。UART_NUM_SERVO是指向UART_NUM_2的宏定义。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">uart_param_config</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">uart2servo_config));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>笔者强烈建议在调用注册函数时同时调用<code>ESP_ERROR_CHECK()</code>，该函数可以在操作失败时及时报错，便于debug。</p>\n<h4>设置通信管脚</h4>\n<p>下一步是为UART控制器分配通信管脚。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">uart_set_pin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, UART_NUM_SERVO_TX, UART_NUM_SERVO_RX, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>通信管脚分配函数<code>uart_set_pin(uart_port_t uart_num, int tx_io_num, int rx_io_num, int rts_io_num, int cts_io_num)</code>共有5个参数，分别为UART控制器编号、TX端口、RX端口、RTS控制端口和CTS控制端口。</p>\n<p>但笔者没用到RTS和CTS功能，所以使用<code>UART_PIN_NO_CHANGE</code>指定默认引脚。</p>\n<h4>安装驱动程序</h4>\n<p>安装UART驱动程序需要提供下列参数</p>\n<blockquote>\n<ul>\n<li>UART 控制器编号</li>\n<li>Tx 环形缓冲区的大小</li>\n<li>Rx 环形缓冲区的大小</li>\n<li>指向事件队列句柄的指针</li>\n<li>事件队列大小</li>\n<li>分配中断的标志</li>\n</ul>\n</blockquote>\n<p><code>uart_driver_install(uart_port_t uart_num, int rx_buffer_size, int tx_buffer_size, int event_queue_size, QueueHandle_t *uart_queue, int intr_alloc_flags)</code>是UART驱动安装函数，传入变量与上面提到的参数一一对应。</p>\n<p>笔者的实践如下，其中RX_BUF_SIZE宏定义为1024。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">uart_driver_install</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, RX_BUF_SIZE </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>这样一来，UART就已经配置完毕，可以开始通信了。</p>\n<h3>UART收发操作</h3>\n<p><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html\" target=\"_blank\" rel=\"noopener noreferrer\">ESP-IDF编程指南</a>指出：</p>\n<blockquote>\n<p>发送数据的过程分为以下步骤：</p>\n<ol>\n<li>将数据写入 Tx FIFO 缓冲区</li>\n<li>FSM 序列化数据</li>\n<li>FSM 发送数据</li>\n</ol>\n<p>接收数据的过程类似，只是步骤相反：</p>\n<ol>\n<li>FSM 处理且并行化传入的串行流</li>\n<li>FSM 将数据写入 Rx FIFO 缓冲区</li>\n<li>从 Rx FIFO 缓冲区读取数据</li>\n</ol>\n<p>因此，应用程序仅会通过 <a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#_CPPv416uart_write_bytes11uart_port_tPKv6size_t\" target=\"_blank\" rel=\"noopener noreferrer\"><code>uart_write_bytes()</code></a> 和 <a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#_CPPv415uart_read_bytes11uart_port_tPv8uint32_t10TickType_t\" target=\"_blank\" rel=\"noopener noreferrer\"><code>uart_read_bytes()</code></a> 从特定缓冲区写入或读取数据，其余工作由 FSM 完成。</p>\n</blockquote>\n<p>幸而我们不需要了解技术实现细节，我们只需要调用UART库进行收发操作。</p>\n<h4>UART发送</h4>\n<p>UART的发送非常简单，只需要使用<code>uart_write_bytes(uart_port_t uart_num, const void *src, size_t size)</code>，传入参数分别为UART控制器编号，待发送数据和待发送数据长度，以下为笔者的实践。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, servoCommand, </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">strlen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h4>UART接收</h4>\n<p>UART的接收稍复杂于发送。以下为笔者的UART接收实践，封装为一个函数以便于操作。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> servoUARTread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">char</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">UARTdata</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    size_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bufferLenth;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">uart_get_buffered_data_len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">bufferLenth));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_read_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, UARTdata, bufferLenth, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">uart_flush</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>传入一个字符串指针，便于传出数据。</p>\n<p>首先，使用<code>uart_get_buffered_data_len()</code>读取缓冲区数据大小，便于下一步指定读取长度。</p>\n<p>随后，使用<code>uart_read_bytes()</code>读取数据，最后的参数“100”为需要等待读取的free RTOS tick数。</p>\n<p>最后，使用<code>uart_flush()</code>清除缓冲区，以等待下一步读取操作。</p>\n<h3>单线串口收发干扰的解决</h3>\n<p>笔者在使用串口助手测试舵机时发现，由于TX、RX短接，每次收到的数据不仅包括应当收到的数据，还包括作为指令发送的数据。简而言之，主机发送的数据会被自己再次收到。</p>\n<p>因此，我们可以先预设“应当收到”的数据，再在接收缓冲区中查找是否有数据与我们预设的“应当受到”的数据匹配，如果有，就表明发送成功。</p>\n<p>以下为笔者的实践：</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">strConnect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoRetrun, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, servoID, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 拼凑出舵机“应该”有的返回值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">char</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                           // 串口读到的信息里有“应该”有的返回值吗？</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> strstr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UARTdata, servoRetrun);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>总线舵机作为对象</h3>\n<p>示例使用C++编写，所以笔者设计了舵机类，对舵机进行一定封装。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> SERVO</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> servoID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"000\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            //舵机编号，默认为000</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> servoCommand</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">16</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">              //待发送的舵机指令</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> servoRetrun</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">16</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">               //应当接收到的舵机回传</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> resetPos</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"0500\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> openPos</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"2000\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    bool</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> servo_init</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    bool</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> opendoor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> setServoID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">char</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> out_servoID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    SERVO</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">char</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">out_servoID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            //构造函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    ~SERVO</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                            //析构函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">SERVO</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">::</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">SERVO</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> out_servoID</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"000\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    strcpy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoID, out_servoID);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    servo_init</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">SERVO::</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">~</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">SERVO</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_driver_delete</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*******************************************************************************</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">****函数功能: 初始化舵机</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">****入口参数: 无</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">****出口参数: true: 设置成功 false: 设置失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">****函数备注: 无</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">********************************************************************************/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">bool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> SERVO</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">::</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">servo_init</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    init_uart2servo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    strConnect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, servoID, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"PID!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                        // 获取舵机ID的指令</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, servoCommand, </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">strlen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand));</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 发送，然后读取串口</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> UARTdata</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">64</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    servoUARTread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UARTdata);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    strConnect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoRetrun, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, servoID, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 拼凑出舵机“应该”有的返回值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    char</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                          // 串口读到的信息里有“应该”有的返回值吗？</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> strstr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UARTdata, servoRetrun);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        strcpy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UARTdata, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        strcpy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoRetrun, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        strConnect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, servoID, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"PMOD!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 舵机读取工作模式指令</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, servoCommand, </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">strlen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        servoUARTread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UARTdata);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        strConnect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoRetrun, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, servoID, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"PMOD1!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 舵机的工作模式应该是舵机模式，顺时针最大270度，即1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> strstr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UARTdata, servoRetrun);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (isOK </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            strcpy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UARTdata, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 工作模式不是1就设置成1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            strConnect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, servoID, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"PMOD1!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, servoCommand, </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">strlen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*******************************************************************************</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">****函数功能: 开门</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">****入口参数: 无</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">****出口参数: true: 开门成功 false: 开门失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">****函数备注: 初始位为500，开门位为2000</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">********************************************************************************/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">bool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> SERVO</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">::</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">opendoor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    strConnect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, servoID, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"P\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, openPos, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"T1000!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // #000P2000T1000!</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, servoCommand, </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">strlen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    vTaskDelay</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    strConnect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, servoID, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"P\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, resetPos, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"T1000!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    uart_write_bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(UART_NUM_SERVO, servoCommand, </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">strlen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(servoCommand));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>参考</h2>\n<ul>\n<li><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html\" target=\"_blank\" rel=\"noopener noreferrer\">ESP-IDF编程指南——通用异步接收器/发送器 (UART)</a></li>\n</ul>\n",
      "date_published": "2024-10-23T00:00:00.000Z",
      "date_modified": "2024-11-10T07:07:56.000Z",
      "authors": [],
      "tags": [
        "ESP32",
        "嵌入式开发",
        "物联网"
      ]
    },
    {
      "title": "ESP32计时器",
      "url": "https://scaxlibur.github.io/EmbeddedDevelopment/ESP32/2024-10-22-ESP32%E8%AE%A1%E6%97%B6%E5%99%A8.html",
      "id": "https://scaxlibur.github.io/EmbeddedDevelopment/ESP32/2024-10-22-ESP32%E8%AE%A1%E6%97%B6%E5%99%A8.html",
      "summary": "前言 ESP-IDF利用结构体进行各种配置，计时器的配置是一个典型案例。 正文 写在前面 计时器的定义本文不再赘述。本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1 ESP32-S3的计时器从无到有共三种状态，即：init -> enable -> run 计时器通常在以下场景中使用： 如同挂钟一般自由运行，随时随地获取高分辨率时间戳；...",
      "content_html": "<h2>前言</h2>\n<p>ESP-IDF利用结构体进行各种配置，计时器的配置是一个典型案例。</p>\n<h2>正文</h2>\n<h3>写在前面</h3>\n<p>计时器的定义本文不再赘述。本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1</p>\n<p>ESP32-S3的计时器从无到有共三种状态，即：init -&gt; enable -&gt; run</p>\n<p>计时器通常在以下场景中使用：</p>\n<ul>\n<li>如同挂钟一般自由运行，随时随地获取高分辨率时间戳；</li>\n<li>生成周期性警报，定期触发事件；</li>\n<li>生成一次性警报，在目标时间内响应。</li>\n</ul>\n<p>本文的应用场景是第二种。本文所用的示例来自于<a href=\"https://github.com/Scaxlibur/highSpeedDAC_ESP-IDF\" target=\"_blank\" rel=\"noopener noreferrer\">ESP32-S3用于并口DAC通信的测试</a></p>\n<p>ESP-IDF多使用结构体的方式进行配置，计时器也不例外。ESP-IDF的驱动层高度抽象，因此使用计时器时无需考虑硬件所属的计时器组和计时器，这些均由后台驱动程序管理。</p>\n<h3>计时器配置</h3>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">gptimer_config_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> waveCounterTimer_config </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .clk_src </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> GPTIMER_CLK_SRC_APB,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     // 时钟源,APB时钟最快不超过80MHz</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .direction </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> GPTIMER_COUNT_UP,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 计时器计数方向</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .resolution_hz </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> TIME_CLOCK_HZ,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">     // 计时器嘀嗒频率配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    .intr_priority </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                 // 中断优先级</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>下面一一解释各项参数</p>\n<h4>时钟源配置</h4>\n<p><code>.clk_src = GPTIMER_CLK_SRC_APB</code></p>\n<p>一般使用APB时钟，频率最快可以到80MHz。</p>\n<p>还可以选择晶振作为时钟，即<code>.clk_src = GPTIMER_CLK_SRC_XTAL</code></p>\n<p>不同的时钟源对功耗有所影响，但由于示例并非功率敏感，因此笔者并未就具体的影响进行探索。</p>\n<h4>计时器计数方向</h4>\n<p><code>.direction = GPTIMER_COUNT_UP</code></p>\n<p>计时器无非就是递增或者递减，本例使用了递增计数</p>\n<p>如果要使用递减计数，那就配置为<code>.direction = GPTIMER_COUNT_DOWN</code></p>\n<h4>计时器嘀嗒频率配置</h4>\n<p>​    <code>.resolution_hz = TIME_CLOCK_HZ</code></p>\n<p>设置内部计时器器的分辨率。计数器每滴答一次相当于 <code>1 / resolution_hz</code> 秒。<code>TIME_CLOCK_HZ</code>是笔者的宏定义。</p>\n<p>事实上，这相当于变相配置了预分频器。但值得注意的是，预分频器的最小分频系数为2，即计时器频率的最大值为40MHz</p>\n<h4>设置中断的优先级</h4>\n<p><code>.intr_priority = 0</code></p>\n<p>设置中断的优先级。如果设置为 <code>0</code>，则会分配一个默认优先级的中断，否则会使用指定的优先级</p>\n<h4>其他配置</h4>\n<p>以上是本例中用到的中断配置，但<a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/peripherals/gptimer.html\" target=\"_blank\" rel=\"noopener noreferrer\">ESP-IDF编程指南</a>还给出了其他配置，即驱动程序是否允许系统在睡眠模式下关闭电源和是否将计时器中断标记为共享源，可能对读者有所帮助。</p>\n<h3>计时器实例化</h3>\n<p>简而言之，实例化就是一种注册，即通知系统分配资源给上文所配置的计时器。<strong>注意：计时器此时还未开启</strong></p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">gptimer_handle_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> waveCounterTimer_handle </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">gptimer_new_timer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">waveCounterTimer_config, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">waveCounterTimer_handle))</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>首先，我们需要使用<code>gptimer_handle_t</code>创建一个计时器句柄，方便我们操作计时器。笔者把句柄理解为指针，故初始化为NULL。</p>\n<p>随后，利用函数<code>gptimer_new_timer（const gptimer_config_t *config, gptimer_handle_t *ret_timer）</code>实例化计时器，简而言之，第一个参数传入上文配置好的计时器配置结构体，第二个参数传入计时器句柄。</p>\n<p>最后，使用ESP-IDF的<code>ESP_ERROR_CHECK（）</code>进行检查，使出现计时器资源不足等错误时能及时报错。不用该函数也可以进行配置，但可能为debug带来不便。</p>\n<h3>设置计时器警报动作</h3>\n<h4>计时器警报配置</h4>\n<p>所谓的警报动作，就是让计时器计数到某个值时产生警报事件，提醒CPU处理相应的事件。生活中，我们使用闹钟提醒我们按时起床，道理是一样的。</p>\n<p>和计时器本身的配置一样，计时器的警报动作也需要使用结构体进行配置，例子的配置如下。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">gptimer_alarm_config_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> waveCounterTimer_alarm_config </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  .alarm_count </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">              // 到达这个数时警报</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  .reload_count </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">              // 重载的数值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  .flags </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  .auto_reload_on_alarm </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">   // 是否自动重载</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>.<code>alarm_count</code>设置警报事件的计数值，到达这个数就会警报。但要注意计时器本身的计数方向。</p>\n<p><code>.reload_count</code>设置警报事件的重载值，如果启用下面的<code>.auto_reload_on_alarm</code>，那么一旦计数器警报，计数器就会自动重载到<code>.reload_count</code>配置的值。</p>\n<p><code>.auto_reload_on_alarm</code>配置计时器是否自动重载。</p>\n<h4>计时器警报实例化</h4>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">`</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">gptimer_set_alarm_action</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(waveCounterTimer_handle, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">waveCounterTimer_alarm_config));`</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>调用<code>gptimer_set_alarm_action(gptimer_handle_t timer, const gptimer_alarm_config_t *config)</code>实例化计时器警报，第一个参数传入上文提到的计时器句柄，第二个参数传入刚刚配置的计时器警报结构体。</p>\n<h3>注册事件回调函数</h3>\n<p>计时器启动后，可动态产生特定事件（如“警报事件”）。如需在事件发生时调用某些函数，就需要通过注册事件回调函数。</p>\n<h4>配置回调函数</h4>\n<p>ESP-IDF支持的回调函数格式如下，必须为布尔值，而且传入变量也必须和下文一致。由于此函数在 ISR 上下文中调用，必须确保该函数不会试图阻塞。</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">bool</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wave_alarm_cb_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">gptimer_handle_t</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> timer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> gptimer_alarm_event_data_t</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">edata</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> *</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">user_ctx</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (waveindex </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">&gt;=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> SAMPLE_PER_CYCLE)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    waveindex </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  waveindex </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">+=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> wave_index_step;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，回调函数的第一个参数为计时器的句柄；第二个参数为计时器警报数据，由驱动传入；第三个参数为用户自定义的传入上下文，由<code>gptimer_register_event_callbacks()</code>提供。</p>\n<p>紧接着，就要配置一个回调函数结构体，格式如下</p>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  const</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> gptimer_event_callbacks_t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> cbs </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                                         .on_alarm </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> wave_alarm_cb_t</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 回调函数的函数名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                                         };</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>注册回调函数</h4>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">gptimer_register_event_callbacks</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(waveCounterTimer_handle, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\">&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">cbs, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">NULL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>通过<code>gptimer_register_event_callbacks(gptimer_handle_t timer, const gptimer_event_callbacks_t *cbs, void *user_data)</code>注册回调函数，第一个参数是配置时钟的句柄地址，第二个是回调函数结构体的地址，第三个是传递给回调函数的上下文。</p>\n<h3>使能计时器</h3>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">gptimer_enable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(waveCounterTimer_handle));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>在对计时器进行 IO 控制之前，需要先调用<code>gptimer_enable(gptimer_handle_t timer)</code>使能计时器，传入计时器句柄，将计时器从init状态切换为enable状态，这样，相应的中断服务会一并使能，时钟的电源管理锁也会启动。</p>\n<h3>启动计时器</h3>\n<div class=\"language-c++ line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"c++\" data-title=\"c++\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ESP_ERROR_CHECK</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">gptimer_start</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(waveCounterTimer_handle));</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>大功告成，一切准备就绪！调用<code>gptimer_start(gptimer_handle_t timer)</code>启动计时器，将计时器从enable状态切换为start状态，使计时器开始工作。</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/peripherals/gptimer.html#id1\" target=\"_blank\" rel=\"noopener noreferrer\">ESP-IDF编程指南——通用计时器</a></li>\n</ul>\n",
      "date_published": "2024-10-22T00:00:00.000Z",
      "date_modified": "2024-11-10T07:07:56.000Z",
      "authors": [],
      "tags": [
        "ESP32",
        "嵌入式开发"
      ]
    }
  ]
}