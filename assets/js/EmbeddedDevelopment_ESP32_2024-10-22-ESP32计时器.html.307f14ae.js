"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[7954],{8295:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},8881:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>l});var e=a(4691);const n={},t=(0,a(8295).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>ESP-IDF利用结构体进行各种配置，计时器的配置是一个典型案例。</p><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文"><span>正文</span></a></h2><h3 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面"><span>写在前面</span></a></h3><p>计时器的定义本文不再赘述。本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1</p><p>ESP32-S3的计时器从无到有共三种状态，即：init -&gt; enable -&gt; run</p><p>计时器通常在以下场景中使用：</p><ul><li>如同挂钟一般自由运行，随时随地获取高分辨率时间戳；</li><li>生成周期性警报，定期触发事件；</li><li>生成一次性警报，在目标时间内响应。</li></ul><p>本文的应用场景是第二种。本文所用的示例来自于<a href="https://github.com/Scaxlibur/highSpeedDAC_ESP-IDF" target="_blank" rel="noopener noreferrer">ESP32-S3用于并口DAC通信的测试</a></p><p>ESP-IDF多使用结构体的方式进行配置，计时器也不例外。ESP-IDF的驱动层高度抽象，因此使用计时器时无需考虑硬件所属的计时器组和计时器，这些均由后台驱动程序管理。</p><h3 id="计时器配置" tabindex="-1"><a class="header-anchor" href="#计时器配置"><span>计时器配置</span></a></h3><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">gptimer_config_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> waveCounterTimer_config </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .clk_src </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> GPTIMER_CLK_SRC_APB,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 时钟源,APB时钟最快不超过80MHz</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .direction </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> GPTIMER_COUNT_UP,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 计时器计数方向</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .resolution_hz </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TIME_CLOCK_HZ,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 计时器嘀嗒频率配置</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .intr_priority </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                 // 中断优先级</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面一一解释各项参数</p><h4 id="时钟源配置" tabindex="-1"><a class="header-anchor" href="#时钟源配置"><span>时钟源配置</span></a></h4><p><code>.clk_src = GPTIMER_CLK_SRC_APB</code></p><p>一般使用APB时钟，频率最快可以到80MHz。</p><p>还可以选择晶振作为时钟，即<code>.clk_src = GPTIMER_CLK_SRC_XTAL</code></p><p>不同的时钟源对功耗有所影响，但由于示例并非功率敏感，因此笔者并未就具体的影响进行探索。</p><h4 id="计时器计数方向" tabindex="-1"><a class="header-anchor" href="#计时器计数方向"><span>计时器计数方向</span></a></h4><p><code>.direction = GPTIMER_COUNT_UP</code></p><p>计时器无非就是递增或者递减，本例使用了递增计数</p><p>如果要使用递减计数，那就配置为<code>.direction = GPTIMER_COUNT_DOWN</code></p><h4 id="计时器嘀嗒频率配置" tabindex="-1"><a class="header-anchor" href="#计时器嘀嗒频率配置"><span>计时器嘀嗒频率配置</span></a></h4><p>​ <code>.resolution_hz = TIME_CLOCK_HZ</code></p><p>设置内部计时器器的分辨率。计数器每滴答一次相当于 <code>1 / resolution_hz</code> 秒。<code>TIME_CLOCK_HZ</code>是笔者的宏定义。</p><p>事实上，这相当于变相配置了预分频器。但值得注意的是，预分频器的最小分频系数为2，即计时器频率的最大值为40MHz</p><h4 id="设置中断的优先级" tabindex="-1"><a class="header-anchor" href="#设置中断的优先级"><span>设置中断的优先级</span></a></h4><p><code>.intr_priority = 0</code></p><p>设置中断的优先级。如果设置为 <code>0</code>，则会分配一个默认优先级的中断，否则会使用指定的优先级</p><h4 id="其他配置" tabindex="-1"><a class="header-anchor" href="#其他配置"><span>其他配置</span></a></h4><p>以上是本例中用到的中断配置，但<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/peripherals/gptimer.html" target="_blank" rel="noopener noreferrer">ESP-IDF编程指南</a>还给出了其他配置，即驱动程序是否允许系统在睡眠模式下关闭电源和是否将计时器中断标记为共享源，可能对读者有所帮助。</p><h3 id="计时器实例化" tabindex="-1"><a class="header-anchor" href="#计时器实例化"><span>计时器实例化</span></a></h3><p>简而言之，实例化就是一种注册，即通知系统分配资源给上文所配置的计时器。<strong>注意：计时器此时还未开启</strong></p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">gptimer_handle_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> waveCounterTimer_handle </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gptimer_new_timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">waveCounterTimer_config, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">waveCounterTimer_handle))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们需要使用<code>gptimer_handle_t</code>创建一个计时器句柄，方便我们操作计时器。笔者把句柄理解为指针，故初始化为NULL。</p><p>随后，利用函数<code>gptimer_new_timer（const gptimer_config_t *config, gptimer_handle_t *ret_timer）</code>实例化计时器，简而言之，第一个参数传入上文配置好的计时器配置结构体，第二个参数传入计时器句柄。</p><p>最后，使用ESP-IDF的<code>ESP_ERROR_CHECK（）</code>进行检查，使出现计时器资源不足等错误时能及时报错。不用该函数也可以进行配置，但可能为debug带来不便。</p><h3 id="设置计时器警报动作" tabindex="-1"><a class="header-anchor" href="#设置计时器警报动作"><span>设置计时器警报动作</span></a></h3><h4 id="计时器警报配置" tabindex="-1"><a class="header-anchor" href="#计时器警报配置"><span>计时器警报配置</span></a></h4><p>所谓的警报动作，就是让计时器计数到某个值时产生警报事件，提醒CPU处理相应的事件。生活中，我们使用闹钟提醒我们按时起床，道理是一样的。</p><p>和计时器本身的配置一样，计时器的警报动作也需要使用结构体进行配置，例子的配置如下。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">gptimer_alarm_config_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> waveCounterTimer_alarm_config </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .alarm_count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // 到达这个数时警报</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .reload_count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // 重载的数值</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .flags </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .auto_reload_on_alarm </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 是否自动重载</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>.<code>alarm_count</code>设置警报事件的计数值，到达这个数就会警报。但要注意计时器本身的计数方向。</p><p><code>.reload_count</code>设置警报事件的重载值，如果启用下面的<code>.auto_reload_on_alarm</code>，那么一旦计数器警报，计数器就会自动重载到<code>.reload_count</code>配置的值。</p><p><code>.auto_reload_on_alarm</code>配置计时器是否自动重载。</p><h4 id="计时器警报实例化" tabindex="-1"><a class="header-anchor" href="#计时器警报实例化"><span>计时器警报实例化</span></a></h4><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gptimer_set_alarm_action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(waveCounterTimer_handle, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">waveCounterTimer_alarm_config));`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>调用<code>gptimer_set_alarm_action(gptimer_handle_t timer, const gptimer_alarm_config_t *config)</code>实例化计时器警报，第一个参数传入上文提到的计时器句柄，第二个参数传入刚刚配置的计时器警报结构体。</p><h3 id="注册事件回调函数" tabindex="-1"><a class="header-anchor" href="#注册事件回调函数"><span>注册事件回调函数</span></a></h3><p>计时器启动后，可动态产生特定事件（如“警报事件”）。如需在事件发生时调用某些函数，就需要通过注册事件回调函数。</p><h4 id="配置回调函数" tabindex="-1"><a class="header-anchor" href="#配置回调函数"><span>配置回调函数</span></a></h4><p>ESP-IDF支持的回调函数格式如下，必须为布尔值，而且传入变量也必须和下文一致。由于此函数在 ISR 上下文中调用，必须确保该函数不会试图阻塞。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> wave_alarm_cb_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">gptimer_handle_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> gptimer_alarm_event_data_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">edata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">user_ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (waveindex </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SAMPLE_PER_CYCLE)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    waveindex </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  waveindex </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> wave_index_step;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，回调函数的第一个参数为计时器的句柄；第二个参数为计时器警报数据，由驱动传入；第三个参数为用户自定义的传入上下文，由<code>gptimer_register_event_callbacks()</code>提供。</p><p>紧接着，就要配置一个回调函数结构体，格式如下</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> gptimer_event_callbacks_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cbs </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                         .on_alarm </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> wave_alarm_cb_t</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 回调函数的函数名</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                         };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注册回调函数" tabindex="-1"><a class="header-anchor" href="#注册回调函数"><span>注册回调函数</span></a></h4><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gptimer_register_event_callbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(waveCounterTimer_handle, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cbs, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过<code>gptimer_register_event_callbacks(gptimer_handle_t timer, const gptimer_event_callbacks_t *cbs, void *user_data)</code>注册回调函数，第一个参数是配置时钟的句柄地址，第二个是回调函数结构体的地址，第三个是传递给回调函数的上下文。</p><h3 id="使能计时器" tabindex="-1"><a class="header-anchor" href="#使能计时器"><span>使能计时器</span></a></h3><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gptimer_enable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(waveCounterTimer_handle));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在对计时器进行 IO 控制之前，需要先调用<code>gptimer_enable(gptimer_handle_t timer)</code>使能计时器，传入计时器句柄，将计时器从init状态切换为enable状态，这样，相应的中断服务会一并使能，时钟的电源管理锁也会启动。</p><h3 id="启动计时器" tabindex="-1"><a class="header-anchor" href="#启动计时器"><span>启动计时器</span></a></h3><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gptimer_start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(waveCounterTimer_handle));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>大功告成，一切准备就绪！调用<code>gptimer_start(gptimer_handle_t timer)</code>启动计时器，将计时器从enable状态切换为start状态，使计时器开始工作。</p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/peripherals/gptimer.html#id1" target="_blank" rel="noopener noreferrer">ESP-IDF编程指南——通用计时器</a></li></ul>',67)]))}]]),l=JSON.parse('{"path":"/EmbeddedDevelopment/ESP32/2024-10-22-ESP32%E8%AE%A1%E6%97%B6%E5%99%A8.html","title":"ESP32计时器","lang":"zh-CN","frontmatter":{"title":"ESP32计时器","date":"2024-10-22T00:00:00.000Z","category":["ESP32","嵌入式开发"],"tag":["ESP32","嵌入式开发"],"order":-1,"description":"前言 ESP-IDF利用结构体进行各种配置，计时器的配置是一个典型案例。 正文 写在前面 计时器的定义本文不再赘述。本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1 ESP32-S3的计时器从无到有共三种状态，即：init -> enable -> run 计时器通常在以下场景中使用： 如同挂钟一般自由运行，随时随地获取高分辨率时间戳；...","head":[["meta",{"property":"og:url","content":"https://scaxlibur.github.io/EmbeddedDevelopment/ESP32/2024-10-22-ESP32%E8%AE%A1%E6%97%B6%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Scaxlibur 博客"}],["meta",{"property":"og:title","content":"ESP32计时器"}],["meta",{"property":"og:description","content":"前言 ESP-IDF利用结构体进行各种配置，计时器的配置是一个典型案例。 正文 写在前面 计时器的定义本文不再赘述。本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1 ESP32-S3的计时器从无到有共三种状态，即：init -> enable -> run 计时器通常在以下场景中使用： 如同挂钟一般自由运行，随时随地获取高分辨率时间戳；..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-10T07:07:56.000Z"}],["meta",{"property":"article:tag","content":"ESP32"}],["meta",{"property":"article:tag","content":"嵌入式开发"}],["meta",{"property":"article:published_time","content":"2024-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T07:07:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ESP32计时器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T07:07:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Scaxlibur博客\\",\\"url\\":\\"https://scaxlibur.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"正文","slug":"正文","link":"#正文","children":[{"level":3,"title":"写在前面","slug":"写在前面","link":"#写在前面","children":[]},{"level":3,"title":"计时器配置","slug":"计时器配置","link":"#计时器配置","children":[]},{"level":3,"title":"计时器实例化","slug":"计时器实例化","link":"#计时器实例化","children":[]},{"level":3,"title":"设置计时器警报动作","slug":"设置计时器警报动作","link":"#设置计时器警报动作","children":[]},{"level":3,"title":"注册事件回调函数","slug":"注册事件回调函数","link":"#注册事件回调函数","children":[]},{"level":3,"title":"使能计时器","slug":"使能计时器","link":"#使能计时器","children":[]},{"level":3,"title":"启动计时器","slug":"启动计时器","link":"#启动计时器","children":[]},{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{"createdTime":1730806224000,"updatedTime":1731222476000,"contributors":[{"name":"Scaxlibur","email":"scaxlibur@gmail.com","commits":3}]},"readingTime":{"minutes":5.48,"words":1645},"filePathRelative":"EmbeddedDevelopment/ESP32/2024-10-22-ESP32计时器.md","localizedDate":"2024年10月22日","excerpt":"<h2>前言</h2>\\n<p>ESP-IDF利用结构体进行各种配置，计时器的配置是一个典型案例。</p>\\n<h2>正文</h2>\\n<h3>写在前面</h3>\\n<p>计时器的定义本文不再赘述。本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1</p>\\n<p>ESP32-S3的计时器从无到有共三种状态，即：init -&gt; enable -&gt; run</p>\\n<p>计时器通常在以下场景中使用：</p>\\n<ul>\\n<li>如同挂钟一般自由运行，随时随地获取高分辨率时间戳；</li>\\n<li>生成周期性警报，定期触发事件；</li>\\n<li>生成一次性警报，在目标时间内响应。</li>\\n</ul>","autoDesc":true}')}}]);