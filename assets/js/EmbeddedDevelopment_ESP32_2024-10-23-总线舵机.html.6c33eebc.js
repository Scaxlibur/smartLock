"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[2632],{8295:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},4347:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>e});var n=a(4691);const l={},t=(0,a(8295).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>总线舵机是一种利用UART总线进行控制的舵机。笔者购买的总线舵机使用单线UART总线，即TX与RX在同一条线上。有的文章指出这样的设计会产生冲突，但笔者猜测如果总线上只有总线舵机，干扰可以通过软件方法解决。</p><p>本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1</p><p>本文的例子来源于<a href="https://github.com/Scaxlibur/smartLock" target="_blank" rel="noopener noreferrer">基于ESP32-S3的高安全性宿舍智能门锁设计</a></p><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文"><span>正文</span></a></h2><h3 id="uart配置" tabindex="-1"><a class="header-anchor" href="#uart配置"><span>UART配置</span></a></h3><p>ESP-IDF配置UART的步骤分为以下几步：</p><blockquote><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-setting-communication-parameters" target="_blank" rel="noopener noreferrer">设置通信参数</a> - 设置波特率、数据位、停止位等</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-setting-communication-pins" target="_blank" rel="noopener noreferrer">设置通信管脚</a> - 分配连接设备的管脚</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-driver-installation" target="_blank" rel="noopener noreferrer">安装驱动程序</a> - 为 UART 驱动程序分配资源</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-running-uart-communication" target="_blank" rel="noopener noreferrer">运行 UART 通信</a> - 发送/接收数据</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-using-interrupts" target="_blank" rel="noopener noreferrer">使用中断</a> - 触发特定通信事件的中断</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#uart-api-deleting-driver" target="_blank" rel="noopener noreferrer">删除驱动程序</a> - 如无需 UART 通信，则释放已分配的资源</li></ol></blockquote><p>步骤 1 到 3 为配置阶段，步骤 4 为 UART 运行阶段，步骤 5 和 6 为可选步骤。</p><h4 id="设置通信参数" tabindex="-1"><a class="header-anchor" href="#设置通信参数"><span>设置通信参数</span></a></h4><p>ESP-IDF的配置风格是使用结构体进行配置，UART配置也不例外。完整的配置结构体如下图：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> uart_config_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> uart2servo_config </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .baud_rate </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    //比特率</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .data_bits </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UART_DATA_8_BITS,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          //传输位</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .parity </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UART_PARITY_DISABLE,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          //奇偶控制</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .stop_bits </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UART_STOP_BITS_1,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          //停止位</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .flow_ctrl </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UART_HW_FLOWCTRL_DISABLE,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //硬件流控模式</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .source_clk </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UART_SCLK_DEFAUL</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          //通信模式</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后，使用<code>uart_param_config(uart_port_t uart_num, const uart_config_t *uart_config)</code>注册该配置，使系统为该UART通信分配相应资源。</p><p>该函数第一个传入参数为UART控制器编号，ESP32-S3有3个UART控制器，由于ESP32使用UART_NUM_0向上位机发送日志，故本例使用UART_NUM_2。UART_NUM_SERVO是指向UART_NUM_2的宏定义。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uart_param_config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">uart2servo_config));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>笔者强烈建议在调用注册函数时同时调用<code>ESP_ERROR_CHECK()</code>，该函数可以在操作失败时及时报错，便于debug。</p><h4 id="设置通信管脚" tabindex="-1"><a class="header-anchor" href="#设置通信管脚"><span>设置通信管脚</span></a></h4><p>下一步是为UART控制器分配通信管脚。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uart_set_pin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, UART_NUM_SERVO_TX, UART_NUM_SERVO_RX, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通信管脚分配函数<code>uart_set_pin(uart_port_t uart_num, int tx_io_num, int rx_io_num, int rts_io_num, int cts_io_num)</code>共有5个参数，分别为UART控制器编号、TX端口、RX端口、RTS控制端口和CTS控制端口。</p><p>但笔者没用到RTS和CTS功能，所以使用<code>UART_PIN_NO_CHANGE</code>指定默认引脚。</p><h4 id="安装驱动程序" tabindex="-1"><a class="header-anchor" href="#安装驱动程序"><span>安装驱动程序</span></a></h4><p>安装UART驱动程序需要提供下列参数</p><blockquote><ul><li>UART 控制器编号</li><li>Tx 环形缓冲区的大小</li><li>Rx 环形缓冲区的大小</li><li>指向事件队列句柄的指针</li><li>事件队列大小</li><li>分配中断的标志</li></ul></blockquote><p><code>uart_driver_install(uart_port_t uart_num, int rx_buffer_size, int tx_buffer_size, int event_queue_size, QueueHandle_t *uart_queue, int intr_alloc_flags)</code>是UART驱动安装函数，传入变量与上面提到的参数一一对应。</p><p>笔者的实践如下，其中RX_BUF_SIZE宏定义为1024。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uart_driver_install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, RX_BUF_SIZE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样一来，UART就已经配置完毕，可以开始通信了。</p><h3 id="uart收发操作" tabindex="-1"><a class="header-anchor" href="#uart收发操作"><span>UART收发操作</span></a></h3><p><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html" target="_blank" rel="noopener noreferrer">ESP-IDF编程指南</a>指出：</p><blockquote><p>发送数据的过程分为以下步骤：</p><ol><li>将数据写入 Tx FIFO 缓冲区</li><li>FSM 序列化数据</li><li>FSM 发送数据</li></ol><p>接收数据的过程类似，只是步骤相反：</p><ol><li>FSM 处理且并行化传入的串行流</li><li>FSM 将数据写入 Rx FIFO 缓冲区</li><li>从 Rx FIFO 缓冲区读取数据</li></ol><p>因此，应用程序仅会通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#_CPPv416uart_write_bytes11uart_port_tPKv6size_t" target="_blank" rel="noopener noreferrer"><code>uart_write_bytes()</code></a> 和 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html#_CPPv415uart_read_bytes11uart_port_tPv8uint32_t10TickType_t" target="_blank" rel="noopener noreferrer"><code>uart_read_bytes()</code></a> 从特定缓冲区写入或读取数据，其余工作由 FSM 完成。</p></blockquote><p>幸而我们不需要了解技术实现细节，我们只需要调用UART库进行收发操作。</p><h4 id="uart发送" tabindex="-1"><a class="header-anchor" href="#uart发送"><span>UART发送</span></a></h4><p>UART的发送非常简单，只需要使用<code>uart_write_bytes(uart_port_t uart_num, const void *src, size_t size)</code>，传入参数分别为UART控制器编号，待发送数据和待发送数据长度，以下为笔者的实践。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uart_write_bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, servoCommand, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="uart接收" tabindex="-1"><a class="header-anchor" href="#uart接收"><span>UART接收</span></a></h4><p>UART的接收稍复杂于发送。以下为笔者的UART接收实践，封装为一个函数以便于操作。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> servoUARTread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">UARTdata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bufferLenth;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uart_get_buffered_data_len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bufferLenth));</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    uart_read_bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, UARTdata, bufferLenth, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ESP_ERROR_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uart_flush</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传入一个字符串指针，便于传出数据。</p><p>首先，使用<code>uart_get_buffered_data_len()</code>读取缓冲区数据大小，便于下一步指定读取长度。</p><p>随后，使用<code>uart_read_bytes()</code>读取数据，最后的参数“100”为需要等待读取的free RTOS tick数。</p><p>最后，使用<code>uart_flush()</code>清除缓冲区，以等待下一步读取操作。</p><h3 id="单线串口收发干扰的解决" tabindex="-1"><a class="header-anchor" href="#单线串口收发干扰的解决"><span>单线串口收发干扰的解决</span></a></h3><p>笔者在使用串口助手测试舵机时发现，由于TX、RX短接，每次收到的数据不仅包括应当收到的数据，还包括作为指令发送的数据。简而言之，主机发送的数据会被自己再次收到。</p><p>因此，我们可以先预设“应当收到”的数据，再在接收缓冲区中查找是否有数据与我们预设的“应当受到”的数据匹配，如果有，就表明发送成功。</p><p>以下为笔者的实践：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strConnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoRetrun, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, servoID, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 拼凑出舵机“应该”有的返回值</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                           // 串口读到的信息里有“应该”有的返回值吗？</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> strstr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UARTdata, servoRetrun);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总线舵机作为对象" tabindex="-1"><a class="header-anchor" href="#总线舵机作为对象"><span>总线舵机作为对象</span></a></h3><p>示例使用C++编写，所以笔者设计了舵机类，对舵机进行一定封装。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SERVO</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servoID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;000&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //舵机编号，默认为000</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servoCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              //待发送的舵机指令</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servoRetrun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               //应当接收到的舵机回传</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> resetPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;0500&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> openPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;2000&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> servo_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> opendoor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setServoID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> out_servoID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    SERVO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">out_servoID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //构造函数</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ~SERVO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                            //析构函数</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">SERVO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SERVO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> out_servoID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;000&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    strcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoID, out_servoID);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    servo_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SERVO::</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SERVO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    uart_driver_delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*******************************************************************************</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">****函数功能: 初始化舵机</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">****入口参数: 无</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">****出口参数: true: 设置成功 false: 设置失败</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">****函数备注: 无</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">********************************************************************************/</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> SERVO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">servo_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    init_uart2servo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    strConnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, servoID, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PID!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                        // 获取舵机ID的指令</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    uart_write_bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, servoCommand, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 发送，然后读取串口</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> UARTdata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    servoUARTread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UARTdata);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    strConnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoRetrun, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, servoID, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 拼凑出舵机“应该”有的返回值</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                          // 串口读到的信息里有“应该”有的返回值吗？</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> strstr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UARTdata, servoRetrun);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        strcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UARTdata, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        strcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoRetrun, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        strConnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, servoID, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PMOD!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 舵机读取工作模式指令</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        uart_write_bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, servoCommand, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand));</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        servoUARTread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UARTdata);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        strConnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoRetrun, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, servoID, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PMOD1!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 舵机的工作模式应该是舵机模式，顺时针最大270度，即1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> strstr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UARTdata, servoRetrun);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (isOK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            strcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UARTdata, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 工作模式不是1就设置成1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            strConnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, servoID, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PMOD1!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            uart_write_bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, servoCommand, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*******************************************************************************</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">****函数功能: 开门</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">****入口参数: 无</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">****出口参数: true: 开门成功 false: 开门失败</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">****函数备注: 初始位为500，开门位为2000</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">********************************************************************************/</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> SERVO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">opendoor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    strConnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, servoID, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;P&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, openPos, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;T1000!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // #000P2000T1000!</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    uart_write_bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, servoCommand, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand));</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    vTaskDelay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    strConnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, servoID, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;P&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, resetPos, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;T1000!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    uart_write_bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(UART_NUM_SERVO, servoCommand, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servoCommand));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.3.1/esp32s3/api-reference/peripherals/uart.html" target="_blank" rel="noopener noreferrer">ESP-IDF编程指南——通用异步接收器/发送器 (UART)</a></li></ul>',52)]))}]]),e=JSON.parse('{"path":"/EmbeddedDevelopment/ESP32/2024-10-23-%E6%80%BB%E7%BA%BF%E8%88%B5%E6%9C%BA.html","title":"总线舵机","lang":"zh-CN","frontmatter":{"title":"总线舵机","date":"2024-10-23T00:00:00.000Z","category":["ESP32","嵌入式开发","物联网"],"tag":["ESP32","嵌入式开发","物联网"],"order":-1,"description":"前言 总线舵机是一种利用UART总线进行控制的舵机。笔者购买的总线舵机使用单线UART总线，即TX与RX在同一条线上。有的文章指出这样的设计会产生冲突，但笔者猜测如果总线上只有总线舵机，干扰可以通过软件方法解决。 本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1 本文的例子来源于基于ESP32-S3的高安全性宿舍智能门锁设计 正文 UA...","head":[["meta",{"property":"og:url","content":"https://scaxlibur.github.io/EmbeddedDevelopment/ESP32/2024-10-23-%E6%80%BB%E7%BA%BF%E8%88%B5%E6%9C%BA.html"}],["meta",{"property":"og:site_name","content":"Scaxlibur 博客"}],["meta",{"property":"og:title","content":"总线舵机"}],["meta",{"property":"og:description","content":"前言 总线舵机是一种利用UART总线进行控制的舵机。笔者购买的总线舵机使用单线UART总线，即TX与RX在同一条线上。有的文章指出这样的设计会产生冲突，但笔者猜测如果总线上只有总线舵机，干扰可以通过软件方法解决。 本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1 本文的例子来源于基于ESP32-S3的高安全性宿舍智能门锁设计 正文 UA..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-10T07:07:56.000Z"}],["meta",{"property":"article:tag","content":"ESP32"}],["meta",{"property":"article:tag","content":"嵌入式开发"}],["meta",{"property":"article:tag","content":"物联网"}],["meta",{"property":"article:published_time","content":"2024-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T07:07:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"总线舵机\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T07:07:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Scaxlibur博客\\",\\"url\\":\\"https://scaxlibur.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"正文","slug":"正文","link":"#正文","children":[{"level":3,"title":"UART配置","slug":"uart配置","link":"#uart配置","children":[]},{"level":3,"title":"UART收发操作","slug":"uart收发操作","link":"#uart收发操作","children":[]},{"level":3,"title":"单线串口收发干扰的解决","slug":"单线串口收发干扰的解决","link":"#单线串口收发干扰的解决","children":[]},{"level":3,"title":"总线舵机作为对象","slug":"总线舵机作为对象","link":"#总线舵机作为对象","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1730806224000,"updatedTime":1731222476000,"contributors":[{"name":"Scaxlibur","email":"scaxlibur@gmail.com","commits":3}]},"readingTime":{"minutes":6.11,"words":1833},"filePathRelative":"EmbeddedDevelopment/ESP32/2024-10-23-总线舵机.md","localizedDate":"2024年10月23日","excerpt":"<h2>前言</h2>\\n<p>总线舵机是一种利用UART总线进行控制的舵机。笔者购买的总线舵机使用单线UART总线，即TX与RX在同一条线上。有的文章指出这样的设计会产生冲突，但笔者猜测如果总线上只有总线舵机，干扰可以通过软件方法解决。</p>\\n<p>本文基于ESP32-S3，编译环境是ESP-IDF v5.3.1</p>\\n<p>本文的例子来源于<a href=\\"https://github.com/Scaxlibur/smartLock\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">基于ESP32-S3的高安全性宿舍智能门锁设计</a></p>\\n<h2>正文</h2>","autoDesc":true}')}}]);